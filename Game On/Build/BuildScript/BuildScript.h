//-----------------------------------------------------------------------------
//  Generated by the Rogue compiler
//-----------------------------------------------------------------------------
#pragma once
#define ROGUE_GC_MODE_MANUAL 0
#define ROGUE_GC_MODE_AUTO 1
#define ROGUE_GC_MODE_BOEHM 0

#ifndef ROGUE_GC_THRESHOLD_DEFAULT
  #define ROGUE_GC_THRESHOLD_DEFAULT 1048576
#endif

// NATIVE HEADERS
//=============================================================================
//  NativeCPP.h
//
//  Rogue runtime routines.
//=============================================================================

#if defined(ROGUE_DEBUG_BUILD)
  #define ROGUE_DEBUG_STATEMENT(_s_) _s_
#else
  #define ROGUE_DEBUG_STATEMENT(_s_)
#endif

#if defined(ROGUE_GCDEBUG_BUILD)
  #define ROGUE_GCDEBUG_STATEMENT(_s_) _s_
#else
  #define ROGUE_GCDEBUG_STATEMENT(_s_) ;
#endif

#if defined(_WIN32)
#  define ROGUE_PLATFORM_WINDOWS 1
#elif defined(__APPLE__)
  #if TARGET_IPHONE_SIMULATOR || TARGET_OS_IPHONE
    #define ROGUE_PLATFORM_IOS 1
  #else
    #define ROGUE_PLATFORM_MACOS 1
    #define ROGUE_PLATFORM_UNIX_COMPATIBLE 1
  #endif
#elif defined(__ANDROID__)
#  define ROGUE_PLATFORM_ANDROID 1
#elif defined(__linux__)
#  define ROGUE_PLATFORM_UNIX_COMPATIBLE 1
#else
#  define ROGUE_PLATFORM_GENERIC 1
#endif

#if defined(ROGUE_PLATFORM_WINDOWS)
#  include <windows.h>
#else
#  include <cstdint>
#endif

#include <stdlib.h>
#include <string.h>


//-----------------------------------------------------------------------------
//  Garbage Collection
//-----------------------------------------------------------------------------
#define ROGUE_DEF_LOCAL_REF(_t_,_n_, _v_) _t_ _n_ = _v_
#define ROGUE_DEF_LOCAL_REF_NULL(_t_,_n_) _t_ _n_ = 0
#define ROGUE_RETAIN_CATCH_VAR(_t_,_n_,_v_)
#define ROGUE_CREATE_REF(_t_,_n_) ((_t_)_n_)
#define ROGUE_ARG(_a_) _a_
#define ROGUE_DEF_COMPOUND_REF_PROP(_t_,_n_) RoguePtr<_t_> _n_

#define ROGUE_XINCREF(_o_)  (++((_o_)->reference_count))
#define ROGUE_XDECREF(_o_)  (--((_o_)->reference_count))
#define ROGUE_INCREF(_o_) if (_o_) (++((_o_)->reference_count))
#define ROGUE_DECREF(_o_) if (_o_) (--((_o_)->reference_count))

#define ROGUE_NEW_BYTES(_count_) malloc(_count_)
#define ROGUE_DEL_BYTES(_ptr_) free(_ptr_)

#define ROGUE_STL_ALLOCATOR std::allocator

extern void Rogue_configure_gc();

#ifdef ROGUE_GC_UNSAFE_COMPOUNDS
  #undef ROGUE_DEF_COMPOUND_REF_PROP
  #define ROGUE_DEF_COMPOUND_REF_PROP(_t_,_n_) _t_ _n_
#endif

#if ROGUE_GC_MODE_BOEHM
  #define GC_NAME_CONFLICT
  #include "gc.h"
  #include "gc_cpp.h"
  #include "gc_allocator.h"

  #undef ROGUE_STL_ALLOCATOR
  #define ROGUE_STL_ALLOCATOR traceable_allocator

  struct RogueObject;
  extern void Rogue_Boehm_IncRef (RogueObject*);
  extern void Rogue_Boehm_DecRef (RogueObject*);

  #undef ROGUE_NEW_BYTES
  #undef ROGUE_DEL_BYTES
  #define ROGUE_NEW_BYTES(_count_) ((void*)GC_MALLOC(_count_))
  //#define ROGUE_DEL_BYTES(_ptr_) GC_FREE(_ptr_)
  #define ROGUE_DEL_BYTES(_ptr_) /* May perform better! */

  #undef ROGUE_INCREF
  #undef ROGUE_DECREF
  #undef ROGUE_XINCREF
  #undef ROGUE_XDECREF
  #define ROGUE_INCREF(_o_) if (_o_) Rogue_Boehm_IncRef(_o_)
  #define ROGUE_DECREF(_o_) if (_o_) Rogue_Boehm_DecRef(_o_)
  #define ROGUE_XINCREF(_o_) Rogue_Boehm_IncRef(_o_)
  #define ROGUE_XDECREF(_o_) Rogue_Boehm_DecRef(_o_)
#endif

#if ROGUE_GC_MODE_AUTO
  #undef ROGUE_DEF_LOCAL_REF_NULL
  #define ROGUE_DEF_LOCAL_REF_NULL(_t_,_n_) RoguePtr<_t_> _n_;
  #undef ROGUE_DEF_LOCAL_REF
  #define ROGUE_DEF_LOCAL_REF(_t_,_n_, _v_) RoguePtr<_t_> _n_(_v_);
  #undef ROGUE_RETAIN_CATCH_VAR
  #define ROGUE_RETAIN_CATCH_VAR(_t_,_n_,_v_) RoguePtr<_t_> _n_(_v_);
  #undef ROGUE_ARG
  #define ROGUE_ARG(_a_) rogue_ptr(_a_)
#endif

#define ROGUE_ATTRIBUTE_IS_CLASS            0
#define ROGUE_ATTRIBUTE_IS_ASPECT           1
#define ROGUE_ATTRIBUTE_IS_PRIMITIVE        2
#define ROGUE_ATTRIBUTE_IS_COMPOUND         3
#define ROGUE_ATTRIBUTE_TYPE_MASK           7

// AKA by-value type; not a reference type
#define ROGUE_ATTRIBUTE_IS_DIRECT           2

#define ROGUE_ATTRIBUTE_IS_NATIVE           32
#define ROGUE_ATTRIBUTE_IS_MACRO            64
#define ROGUE_ATTRIBUTE_IS_INITIALIZER      128
#define ROGUE_ATTRIBUTE_IS_IMMUTABLE        256
#define ROGUE_ATTRIBUTE_IS_GLOBAL           512
#define ROGUE_ATTRIBUTE_IS_SINGLETON        1024
#define ROGUE_ATTRIBUTE_IS_INCORPORATED     2048
#define ROGUE_ATTRIBUTE_IS_GENERATED        4096
#define ROGUE_ATTRIBUTE_IS_REQUISITE        8192
#define ROGUE_ATTRIBUTE_IS_TASK             16384
#define ROGUE_ATTRIBUTE_IS_TASK_CONVERSION  32768
#define ROGUE_ATTRIBUTE_IS_AUGMENT          65536
#define ROGUE_ATTRIBUTE_IS_ABSTRACT         131072
#define ROGUE_ATTRIBUTE_IS_ROUTINE          262144
#define ROGUE_ATTRIBUTE_IS_FALLBACK         524288
#define ROGUE_ATTRIBUTE_IS_SPECIAL          1048576
#define ROGUE_ATTRIBUTE_IS_PROPAGATED       2097152

template <class T>
struct RoguePtr
{
  T o;
  RoguePtr ( ) : o(0) { }

  RoguePtr (  T oo )
   : o(oo)
  {
    ROGUE_GCDEBUG_STATEMENT(printf("ref "));
    ROGUE_GCDEBUG_STATEMENT(show());
    ROGUE_INCREF(o);
  }

  RoguePtr (const RoguePtr<T> & oo)
   : o(oo.o)
  {
    ROGUE_GCDEBUG_STATEMENT(printf("ref "));
    ROGUE_GCDEBUG_STATEMENT(show());
    ROGUE_INCREF(o);
  }

  template <class O>
  operator O ()
  {
    return (O)o;
  }

  operator T ()
  {
    return o;
  }

  RoguePtr & operator= ( T oo )
  {
    release();
    o = oo;
    ROGUE_INCREF(o);
    ROGUE_GCDEBUG_STATEMENT(printf("assign "));
    ROGUE_GCDEBUG_STATEMENT(show());
    return *this;
  }

  bool operator==( RoguePtr<T> other ) const
  {
    return (o == other.o);
  }

  bool operator!=( RoguePtr<T> other ) const
  {
    return (o != other.o);
  }

  T& operator->()
  {
    return o;
  }

  void release ()
  {
    if (!o) return;
    ROGUE_DECREF(o);
    ROGUE_GCDEBUG_STATEMENT( if (o->reference_count == 0) show() );
    if (o->reference_count < 0) o->reference_count = 0;
    o = 0;
  }

  ~RoguePtr ()
  {
    release();
  }

  void show () {
    printf("ptr:%p o:%p rc:%i\n", this, o, o ? o->reference_count : -42);
  }
};


template < class T, class U >
bool operator!=( const RoguePtr<T>& lhs, const RoguePtr<U>& rhs )
{
  return lhs.o != rhs.o;
}


template <class T>
RoguePtr<T> & rogue_ptr ( RoguePtr<T> & o )
{
  return o;
}

template <class T>
RoguePtr<T*> rogue_ptr ( T * p )
{
  return RoguePtr<T*>(p);
}

template <class T>
T rogue_ptr (T p)
{
  return p;
}


//-----------------------------------------------------------------------------
//  Basics (Primitive types, macros, etc.)
//-----------------------------------------------------------------------------
#if defined(ROGUE_PLATFORM_WINDOWS)
  typedef double           RogueReal64;
  typedef float            RogueReal32;
  typedef __int64          RogueInt64;
  typedef __int32          RogueInt32;
  typedef __int32          RogueCharacter;
  typedef unsigned __int16 RogueWord;
  typedef unsigned char    RogueByte;
  typedef bool             RogueLogical;
#else
  typedef double           RogueReal64;
  typedef float            RogueReal32;
  typedef int64_t          RogueInt64;
  typedef int32_t          RogueInt32;
  typedef int32_t          RogueCharacter;
  typedef uint16_t         RogueWord;
  typedef uint8_t          RogueByte;
  typedef bool             RogueLogical;
#endif

struct RogueAllocator;
struct RogueArray;
struct RogueCharacterList;
struct RogueString;

#define ROGUE_CREATE_OBJECT(name) RogueType_create_object(RogueType##name,0)
  //e.g. RogueType_create_object(RogueStringBuilder,0)

#define ROGUE_SINGLETON(name) RogueType_singleton(RogueType##name)
  //e.g. RogueType_singleton( RogueTypeConsole )

#define ROGUE_PROPERTY(name) p_##name


//-----------------------------------------------------------------------------
//  Forward References
//-----------------------------------------------------------------------------
struct RogueObject;


//-----------------------------------------------------------------------------
//  Callback Definitions
//-----------------------------------------------------------------------------
typedef void         (*RogueCallback)();
typedef void         (*RogueTraceFn)( void* obj );
typedef RogueObject* (*RogueInitFn)( void* obj );
typedef void         (*RogueCleanUpFn)( void* obj );
typedef RogueString* (*RogueToStringFn)( void* obj );


//-----------------------------------------------------------------------------
//  RogueCallbackInfo
//-----------------------------------------------------------------------------
struct RogueCallbackInfo
{
  RogueCallback      callback;
  RogueCallbackInfo* next_callback_info;

  RogueCallbackInfo() : callback(0), next_callback_info(0) {}
  RogueCallbackInfo( RogueCallback callback ) : callback(callback), next_callback_info(0) {}

  ~RogueCallbackInfo() { if (next_callback_info) delete next_callback_info; }

  void add( RogueCallback callback )
  {
    if (this->callback)
    {
      if (next_callback_info) next_callback_info->add( callback );
      else                    next_callback_info = new RogueCallbackInfo( callback );
    }
    else
    {
      this->callback = callback;
    }
  }

  void call()
  {
    if (callback) callback();
    if (next_callback_info) next_callback_info->call();
  }
};


//-----------------------------------------------------------------------------
//  RogueType
//-----------------------------------------------------------------------------
struct RogueType
{
  RogueObject* type_info;

  int          name_index;

  int          base_type_count;
  RogueType**  base_types;

  int          index;  // used for aspect call dispatch
  int          object_size;
  int          attributes;

  int          global_property_count;
  int*         global_property_name_indices;
  int*         global_property_type_indices;
  void**       global_property_pointers;

  int          property_count;
  int*         property_name_indices;
  int*         property_type_indices;
  int*         property_offsets;

  RogueObject* _singleton;
  void**       methods;

  RogueAllocator*   allocator;

  RogueTraceFn      trace_fn;
  RogueInitFn       init_object_fn;
  RogueInitFn       init_fn;
  RogueCleanUpFn    on_cleanup_fn;
  RogueToStringFn   to_string_fn;
};

RogueArray*  RogueType_create_array( int count, int element_size, bool is_reference_array=false );
RogueObject* RogueType_create_object( RogueType* THIS, RogueInt32 size );
RogueString* RogueType_name( RogueType* THIS );
bool         RogueType_name_equals( RogueType* THIS, const char* name );
void         RogueType_print_name( RogueType* THIS );
RogueType*   RogueType_retire( RogueType* THIS );
RogueObject* RogueType_singleton( RogueType* THIS );


//-----------------------------------------------------------------------------
//  RogueObject
//-----------------------------------------------------------------------------
struct RogueObjectType : RogueType
{
};

struct RogueObject
{
#if defined(ROGUE_CUSTOM_OBJECT_PROPERTY)
ROGUE_CUSTOM_OBJECT_PROPERTY
#endif

  RogueObject* next_object;
  // Used to keep track of this allocation so that it can be freed when no
  // longer referenced.

  RogueType*   type;
  // Type info for this object.

  RogueInt32 object_size;
  // Set to be ~object_size when traced through during a garbage collection,
  // then flipped back again at the end of GC.

  RogueInt32 reference_count;
  // A positive reference_count ensures that this object will never be
  // collected.  A zero reference_count means this object is kept only as
  // long as it is visible to the memory manager.
};

RogueObject* RogueObject_as( RogueObject* THIS, RogueType* specialized_type );
RogueLogical RogueObject_instance_of( RogueObject* THIS, RogueType* ancestor_type );
void*        RogueObject_retain( RogueObject* THIS );
void*        RogueObject_release( RogueObject* THIS );
RogueString* RogueObject_to_string( RogueObject* THIS );

void RogueObject_trace( void* obj );
void RogueString_trace( void* obj );
void RogueArray_trace( void* obj );


//-----------------------------------------------------------------------------
//  RogueString
//-----------------------------------------------------------------------------
struct RogueString : RogueObject
{
  RogueInt32 byte_count;       // in UTF-8 bytes
  RogueInt32 character_count;  // in whole characters
  RogueInt32 is_ascii;
  RogueInt32 cursor_offset;
  RogueInt32 cursor_index;
  RogueInt32 hash_code;
  RogueByte  utf8[];
};

RogueString* RogueString_create_with_byte_count( int byte_count );
RogueString* RogueString_create_from_utf8( const char* utf8, int count=-1 );
RogueString* RogueString_create_from_characters( RogueCharacterList* characters );
void         RogueString_print_string( RogueString* st );
void         RogueString_print_characters( RogueCharacter* characters, int count );
void         RogueString_print_utf8( RogueByte* utf8, int count );

RogueCharacter RogueString_character_at( RogueString* THIS, int index );
RogueInt32     RogueString_set_cursor( RogueString* THIS, int index );
RogueString*   RogueString_validate( RogueString* THIS );


//-----------------------------------------------------------------------------
//  RogueArray
//-----------------------------------------------------------------------------
struct RogueArray : RogueObject
{
  int  count;
  int  element_size;
  bool is_reference_array;

  union
  {
    RogueObject*   as_objects[];
    RogueByte      as_logicals[];
    RogueByte      as_bytes[];
    RogueCharacter as_characters[];
    RogueInt32     as_int32s[];
    RogueInt64     as_int64s[];
    RogueReal32    as_real32s[];
    RogueReal64    as_real64s[];
  };
};

RogueArray* RogueArray_set( RogueArray* THIS, RogueInt32 i1, RogueArray* other, RogueInt32 other_i1, RogueInt32 copy_count );


//-----------------------------------------------------------------------------
//  RogueAllocator
//-----------------------------------------------------------------------------
#ifndef ROGUEMM_PAGE_SIZE
// 4k; should be a multiple of 256 if redefined
#  define ROGUEMM_PAGE_SIZE (4*1024)
#endif

// 0 = large allocations, 1..4 = block sizes 64, 128, 192, 256
#ifndef ROGUEMM_SLOT_COUNT
#  define ROGUEMM_SLOT_COUNT 5
#endif

// 2^6 = 64
#ifndef ROGUEMM_GRANULARITY_BITS
#  define ROGUEMM_GRANULARITY_BITS 6
#endif

// Block sizes increase by 64 bytes per slot
#ifndef ROGUEMM_GRANULARITY_SIZE
#  define ROGUEMM_GRANULARITY_SIZE (1 << ROGUEMM_GRANULARITY_BITS)
#endif

// 63
#ifndef ROGUEMM_GRANULARITY_MASK
#  define ROGUEMM_GRANULARITY_MASK (ROGUEMM_GRANULARITY_SIZE - 1)
#endif

// Small allocation limit is 256 bytes - afterwards objects are allocated
// from the system.
#ifndef ROGUEMM_SMALL_ALLOCATION_SIZE_LIMIT
#  define ROGUEMM_SMALL_ALLOCATION_SIZE_LIMIT  ((ROGUEMM_SLOT_COUNT-1) << ROGUEMM_GRANULARITY_BITS)
#endif


//-----------------------------------------------------------------------------
//  RogueAllocationPage
//-----------------------------------------------------------------------------
struct RogueAllocationPage
{
  // Backs small 0..256-byte allocations.
  RogueByte  data[ ROGUEMM_PAGE_SIZE ];

  RogueAllocationPage* next_page;

  RogueByte* cursor;
  int        remaining;
};

RogueAllocationPage* RogueAllocationPage_create( RogueAllocationPage* next_page );
RogueAllocationPage* RogueAllocationPage_delete( RogueAllocationPage* THIS );
void*                RogueAllocationPage_allocate( RogueAllocationPage* THIS, int size );


//-----------------------------------------------------------------------------
//  RogueAllocator
//-----------------------------------------------------------------------------
struct RogueAllocator
{
  RogueAllocationPage* pages;
  RogueObject*         objects;
  RogueObject*         objects_requiring_cleanup;
  RogueObject*         available_objects[ROGUEMM_SLOT_COUNT];
};

RogueAllocator* RogueAllocator_create();
RogueAllocator* RogueAllocator_delete( RogueAllocator* THIS );

void*        RogueAllocator_allocate( int size );
RogueObject* RogueAllocator_allocate_object( RogueAllocator* THIS, RogueType* of_type, int size );
void*        RogueAllocator_free( RogueAllocator* THIS, void* data, int size );
void         RogueAllocator_free_objects( RogueAllocator* THIS );
void         RogueAllocator_collect_garbage( RogueAllocator* THIS );

extern int                Rogue_allocator_count;
extern RogueAllocator     Rogue_allocators[];
extern int                Rogue_type_count;
extern RogueType          Rogue_types[];
extern int                Rogue_type_info_table[];
extern int                Rogue_type_name_index_table[];
extern int                Rogue_object_size_table[];
extern void*              Rogue_global_property_pointers[];
extern int                Rogue_property_offsets[];
extern int                Rogue_attributes_table[];
extern void*              Rogue_dynamic_method_table[];
//extern int                Rogue_property_info_table[][];
extern RogueInitFn        Rogue_init_object_fn_table[];
extern RogueInitFn        Rogue_init_fn_table[];
extern RogueTraceFn       Rogue_trace_fn_table[];
extern RogueCleanUpFn     Rogue_on_cleanup_fn_table[];
extern RogueToStringFn    Rogue_to_string_fn_table[];
extern int                Rogue_literal_string_count;
extern RogueString*       Rogue_literal_strings[];
extern RogueLogical       Rogue_configured;
extern int                Rogue_argc;
extern const char**       Rogue_argv;
extern int                Rogue_allocation_bytes_until_gc;
extern bool               Rogue_gc_logging;
extern int                Rogue_gc_threshold;
extern bool               Rogue_gc_requested;
extern RogueCallbackInfo  Rogue_on_gc_begin;
extern RogueCallbackInfo  Rogue_on_gc_trace_finished;
extern RogueCallbackInfo  Rogue_on_gc_end;

struct RogueWeakReference;
extern RogueWeakReference* Rogue_weak_references;

void Rogue_configure( int argc=0, const char* argv[]=0 );
bool Rogue_collect_garbage( bool forced=false );
void Rogue_launch();
void Rogue_quit();
bool Rogue_update_tasks();  // returns true if tasks are still active


//-----------------------------------------------------------------------------
//  RogueDebugTrace
//-----------------------------------------------------------------------------
struct RogueDebugTrace
{
  static char buffer[120];

  const char* method_signature;
  const char* filename;
  int line;
  RogueDebugTrace* previous_trace;

  RogueDebugTrace( const char* method_signature, const char* filename, int line );
  ~RogueDebugTrace();

  int   count();

  char* to_c_string();
};

void Rogue_print_stack_trace ( bool leading_newline=false);


//-----------------------------------------------------------------------------
//  Error Handling
//-----------------------------------------------------------------------------
#define ROGUE_TRY \
  try \
  {

#define ROGUE_END_TRY \
  }

#define ROGUE_THROW(_ErrorType,_error_object) \
  throw (_ErrorType*)_error_object

#define ROGUE_CATCH(_ErrorType,local_error_object) \
  } \
  catch (_ErrorType* local_error_object) \
  { \
    ROGUE_RETAIN_CATCH_VAR( _ErrorType*, _internal_exception_reference, local_error_object );

#define ROGUE_CATCH_NO_VAR(_ErrorType) \
  } \
  catch (_ErrorType* caught_error) \
  {

extern void Rogue_terminate_handler ();


//=============================================================================
#include <sys/ioctl.h>
#include <unistd.h>
extern "C" char **environ;
#include <termios.h>
      #if __APPLE__
        #include "TargetConditionals.h"
      #endif
#include <cstdio>
#include <cmath>

// FORWARD DECLARATIONS
struct RogueClassGlobal; // Global
struct RogueClassPrintWriter_global_output_buffer_; // PrintWriter<<global_output_buffer>>
struct RogueClassPrintWriter; // PrintWriter
struct RogueStringBuilder; // StringBuilder
struct RogueByte_List; // Byte[]
struct RogueClassGenericList; // GenericList
struct RogueFunction___List; // Function()[]
struct RogueClassFunction__; // Function()
struct RogueException; // Exception
struct RogueClassStackTrace; // StackTrace
struct RogueString_List; // String[]
struct RogueCharacter_List; // Character[]
struct RogueClassConsole; // Console
struct RogueClassReader_Byte_; // Reader<<Byte>>
struct RogueClassPrintWriter_output_buffer_; // PrintWriter<<output_buffer>>
struct RogueClassConsoleErrorPrinter; // ConsoleErrorPrinter
struct RogueClassConsoleIOHandler; // ConsoleIOHandler
struct RogueClassMath; // Math
struct RogueClassRuntime; // Runtime
struct RogueClassFunction_190; // Function_190
struct RogueClassget_platform; // get_platform
struct RogueClassstandard_build; // standard_build
struct RogueClassSystem; // System
struct RogueClassError; // Error
struct RogueWeakReference; // WeakReference
struct RogueClassFile; // File
struct RogueClassFunction_623; // Function_623
struct RogueClassBlockingConsoleIOHandler; // BlockingConsoleIOHandler
struct RogueClassBuildConfig; // BuildConfig
struct RogueClassinstall_emscripten; // install_emscripten
struct RogueClassconfigure_build_folder; // configure_build_folder
struct RogueClasscompile; // compile
struct RogueClassIOError; // IOError
struct RogueClassinstall_brew; // install_brew
struct RogueClassinstall_library; // install_library
struct RogueClassneed_compile; // need_compile
struct RogueClassmobile_or_desktop; // mobile_or_desktop
struct RogueClassrequire_command_line; // require_command_line
struct RogueOptionalInt32; // Int32?
struct RogueClassSystemEnvironment; // SystemEnvironment
struct RogueClassFileOptions; // FileOptions

// COMPOUND DEFINITIONS
struct RogueOptionalInt32
{
  // PROPERTIES
  RogueInt32 value;
  RogueLogical exists;

  RogueOptionalInt32() { memset( this, 0, sizeof(RogueOptionalInt32) ); }

  RogueOptionalInt32( RogueInt32 value, bool exists=true ) : value(value), exists(exists) {}
  bool operator==( const RogueOptionalInt32 &other ) const
  {
    if (exists)
    {
      if (other.exists) return value == other.value;
      else              return false;
    }
    else
    {
      if (other.exists) return false;
      else              return true;
    }
  }

  bool operator!=( const RogueOptionalInt32 &other ) const
  {
    return !(*this == other);
  }
};

struct RogueClassSystemEnvironment
{
  // PROPERTIES

  bool operator==( const RogueClassSystemEnvironment &other ) const
  {
    return (0 == memcmp(this,&other,sizeof(RogueClassSystemEnvironment)));
  }

  bool operator!=( const RogueClassSystemEnvironment &other ) const
  {
    return !(*this == other);
  }
};

struct RogueClassFileOptions
{
  // PROPERTIES
  RogueInt32 flags;

  RogueClassFileOptions() { memset( this, 0, sizeof(RogueClassFileOptions) ); }

  RogueClassFileOptions( RogueInt32 flags ) : flags(flags) {}

  bool operator==( const RogueClassFileOptions &other ) const
  {
    return (0 == memcmp(this,&other,sizeof(RogueClassFileOptions)));
  }

  bool operator!=( const RogueClassFileOptions &other ) const
  {
    return !(*this == other);
  }
};


// GLOBAL PROPERTIES
extern RogueByte_List* RogueStringBuilder_work_bytes;
extern RogueString_List* RogueSystem_command_line_arguments;
extern RogueString* RogueSystem_executable_filepath;
extern RogueClassSystemEnvironment RogueSystem_environment;

// CLASS DEFINITIONS
struct RogueClassGlobal : RogueObject
{
  // PROPERTIES
  RogueClassPrintWriter* console;
  RogueStringBuilder* global_output_buffer;
  RogueFunction___List* exit_functions;

};

struct RogueClassPrintWriter_global_output_buffer_ : RogueObject
{
};

struct RogueClassPrintWriter : RogueObject
{
};

struct RogueStringBuilder : RogueObject
{
  // PROPERTIES
  RogueByte_List* utf8;
  RogueInt32 count;
  RogueInt32 indent;
  RogueInt32 cursor_offset;
  RogueInt32 cursor_index;
  RogueLogical at_newline;

};

struct RogueByte_List : RogueObject
{
  // PROPERTIES
  RogueArray* data;
  RogueInt32 count;

};

struct RogueClassGenericList : RogueObject
{
  // PROPERTIES

};




struct RogueFunction___List : RogueObject
{
  // PROPERTIES
  RogueArray* data;
  RogueInt32 count;

};

struct RogueClassFunction__ : RogueObject
{
};

struct RogueException : RogueObject
{
  // PROPERTIES
  RogueString* message;
  RogueClassStackTrace* stack_trace;

};

struct RogueClassStackTrace : RogueObject
{
  // PROPERTIES
  RogueString_List* entries;
  RogueInt32 count;
  RogueLogical is_formatted;

};

struct RogueString_List : RogueObject
{
  // PROPERTIES
  RogueArray* data;
  RogueInt32 count;

};




struct RogueCharacter_List : RogueObject
{
  // PROPERTIES
  RogueArray* data;
  RogueInt32 count;

};

struct RogueClassConsole : RogueObject
{
  // PROPERTIES
  RogueInt32 position;
  RogueClassConsoleErrorPrinter* error;
  RogueStringBuilder* output_buffer;
  RogueStringBuilder* input_buffer;
  RogueOptionalInt32 next_input_byte;
  RogueClassConsoleIOHandler* io_handler;
  termios original_terminal_settings;

};

struct RogueClassReader_Byte_ : RogueObject
{
};

struct RogueClassPrintWriter_output_buffer_ : RogueObject
{
};

struct RogueClassConsoleErrorPrinter : RogueObject
{
  // PROPERTIES
  RogueStringBuilder* output_buffer;

};

struct RogueClassConsoleIOHandler : RogueObject
{
  // PROPERTIES

};

struct RogueClassMath : RogueObject
{
  // PROPERTIES

};

struct RogueClassRuntime : RogueObject
{
  // PROPERTIES

};

struct RogueClassFunction_190 : RogueObject
{
  // PROPERTIES

};

struct RogueClassget_platform : RogueObject
{
  // PROPERTIES

};

struct RogueClassstandard_build : RogueObject
{
  // PROPERTIES

};

struct RogueClassSystem : RogueObject
{
  // PROPERTIES

};

struct RogueClassError : RogueException
{
  // PROPERTIES

};

struct RogueWeakReference : RogueObject
{
  // PROPERTIES
  RogueWeakReference* next_weak_reference;
  RogueObject* value;

};

struct RogueClassFile : RogueObject
{
  // PROPERTIES
  RogueString* filepath;

};

struct RogueClassFunction_623 : RogueObject
{
  // PROPERTIES
  RogueClassConsole* console;

};

struct RogueClassBlockingConsoleIOHandler : RogueObject
{
  // PROPERTIES
  RogueOptionalInt32 next_input_byte;

};

struct RogueClassBuildConfig : RogueObject
{
  // PROPERTIES
  RogueLogical ide_flag;

};

struct RogueClassinstall_emscripten : RogueObject
{
  // PROPERTIES

};

struct RogueClassconfigure_build_folder : RogueObject
{
  // PROPERTIES

};

struct RogueClasscompile : RogueObject
{
  // PROPERTIES

};

struct RogueClassIOError : RogueClassError
{
  // PROPERTIES

};

struct RogueClassinstall_brew : RogueObject
{
  // PROPERTIES

};

struct RogueClassinstall_library : RogueObject
{
  // PROPERTIES

};

struct RogueClassneed_compile : RogueObject
{
  // PROPERTIES

};

struct RogueClassmobile_or_desktop : RogueObject
{
  // PROPERTIES

};

struct RogueClassrequire_command_line : RogueObject
{
  // PROPERTIES

};


// ROGUE TYPES
extern RogueType* RogueTypeObject;
extern RogueType* RogueTypeGlobal;
extern RogueType* RogueTypePrintWriter_global_output_buffer_;
extern RogueType* RogueTypePrintWriter;
extern RogueType* RogueTypeStringBuilder;
extern RogueType* RogueTypeByte_List;
extern RogueType* RogueTypeGenericList;
extern RogueType* RogueTypeByte;
extern RogueType* RogueTypeArray;
extern RogueType* RogueTypeInt32;
extern RogueType* RogueTypeLogical;
extern RogueType* RogueTypeFunction___List;
extern RogueType* RogueTypeFunction__;
extern RogueType* RogueTypeException;
extern RogueType* RogueTypeString;
extern RogueType* RogueTypeStackTrace;
extern RogueType* RogueTypeString_List;
extern RogueType* RogueTypeReal64;
extern RogueType* RogueTypeInt64;
extern RogueType* RogueTypeCharacter;
extern RogueType* RogueTypeCharacter_List;
extern RogueType* RogueTypeConsole;
extern RogueType* RogueTypeReader_Byte_;
extern RogueType* RogueTypePrintWriter_output_buffer_;
extern RogueType* RogueTypeConsoleErrorPrinter;
extern RogueType* RogueTypeConsoleIOHandler;
extern RogueType* RogueTypeMath;
extern RogueType* RogueTypeRuntime;
extern RogueType* RogueTypeFunction_190;
extern RogueType* RogueTypeget_platform;
extern RogueType* RogueTypestandard_build;
extern RogueType* RogueTypeSystem;
extern RogueType* RogueTypeError;
extern RogueType* RogueTypeWeakReference;
extern RogueType* RogueTypeFile;
extern RogueType* RogueTypeFunction_623;
extern RogueType* RogueTypeBlockingConsoleIOHandler;
extern RogueType* RogueTypeBuildConfig;
extern RogueType* RogueTypeinstall_emscripten;
extern RogueType* RogueTypeconfigure_build_folder;
extern RogueType* RogueTypecompile;
extern RogueType* RogueTypeIOError;
extern RogueType* RogueTypeinstall_brew;
extern RogueType* RogueTypeinstall_library;
extern RogueType* RogueTypeneed_compile;
extern RogueType* RogueTypemobile_or_desktop;
extern RogueType* RogueTyperequire_command_line;
extern RogueType* RogueTypeOptionalInt32;
extern RogueType* RogueTypeSystemEnvironment;
extern RogueType* RogueTypeFileOptions;

// ROUTINE PROTOTYPES
void RogueStringBuilder__init_class();
RogueLogical RogueString__operatorEQUALSEQUALS__String_String( RogueString* a_0, RogueString* b_1 );
RogueString* RogueString__operatorPLUS__String_String( RogueString* st_0, RogueString* value_1 );
RogueString* RogueString__operatorTIMES__String_Int32( RogueString* st_0, RogueInt32 value_1 );
RogueCharacter RogueCharacter__create__Int32( RogueInt32 value_0 );
RogueString* RogueConsole__input__String( RogueString* prompt_0 );
RogueInt32 RogueMath__max__Int32_Int32( RogueInt32 a_0, RogueInt32 b_1 );
RogueInt64 RogueMath__mod__Int64_Int64( RogueInt64 a_0, RogueInt64 b_1 );
void RogueRuntime__init_class();
void RogueRuntime__set_gc_threshold__Int32( RogueInt32 value_0 );
RogueString* Rogueget_platform__call();
void Roguestandard_build__call__String( RogueString* target_0 );
void RogueSystem__exit__Int32( RogueInt32 result_code_0 );
RogueString* RogueSystem__os();
RogueInt32 RogueSystem__run__String( RogueString* command_0 );
void RogueSystem__init_class();
RogueString* RogueFile__absolute_filepath__String( RogueString* filepath_0 );
RogueLogical RogueFile__create_folder__String( RogueString* _auto_941 );
RogueLogical RogueFile__exists__String( RogueString* filepath_0 );
RogueString* RogueFile__filename__String( RogueString* filepath_0 );
RogueString* RogueFile__folder__String( RogueString* filepath_0 );
RogueLogical RogueFile__is_folder__String( RogueString* filepath_0 );
RogueString_List* RogueFile__listing__String_Logical_Logical_Logical_Logical( RogueString* folder_0, RogueLogical ignore_hidden_1, RogueLogical recursive_2, RogueLogical absolute_3, RogueLogical omit_path_4 );
RogueString_List* RogueFile__listing__String_FileOptions( RogueString* folder_0, RogueClassFileOptions options_1 );
RogueString_List* RogueFile__listing__String_FileOptions_String_String_List( RogueString* _auto_942, RogueClassFileOptions options_1, RogueString* _auto_943, RogueString_List* result_3 );
RogueLogical RogueFile__matches_wildcard_pattern__String_String( RogueString* filepath_0, RogueString* pattern_1 );
RogueReal64 RogueFile__timestamp__String( RogueString* filepath_0 );
void Rogueinstall_emscripten__call();
void Rogueconfigure_build_folder__call__String( RogueString* target_0 );
void Roguecompile__call__String( RogueString* target_0 );
void Rogueinstall_brew__call();
void Rogueinstall_library__call__String( RogueString* library_name_0 );
RogueLogical Rogueneed_compile__call__String_String( RogueString* target_0, RogueString* output_folder_1 );
RogueString* Roguemobile_or_desktop__call__String( RogueString* target_0 );
void Roguerequire_command_line__call();
RogueOptionalInt32 RogueOptionalInt32__create();

// METHOD PROTOTYPES
void RogueObject__init_object( RogueObject* THIS );
RogueObject* RogueObject__init( RogueObject* THIS );
RogueInt64 RogueObject__object_id( RogueObject* THIS );
RogueString* RogueObject__to_String( RogueObject* THIS );
RogueString* RogueObject__type_name( RogueObject* THIS );
RogueClassGlobal* RogueGlobal__init_object( RogueClassGlobal* THIS );
RogueClassGlobal* RogueGlobal__init( RogueClassGlobal* THIS );
RogueString* RogueGlobal__type_name( RogueClassGlobal* THIS );
RogueClassGlobal* RogueGlobal__flush( RogueClassGlobal* THIS );
RogueClassGlobal* RogueGlobal__print__Object( RogueClassGlobal* THIS, RogueObject* value_0 );
RogueClassGlobal* RogueGlobal__print__String( RogueClassGlobal* THIS, RogueString* value_0 );
RogueClassGlobal* RogueGlobal__println( RogueClassGlobal* THIS );
RogueClassGlobal* RogueGlobal__println__Object( RogueClassGlobal* THIS, RogueObject* value_0 );
RogueClassGlobal* RogueGlobal__println__String( RogueClassGlobal* THIS, RogueString* value_0 );
RogueClassGlobal* RogueGlobal__write__StringBuilder( RogueClassGlobal* THIS, RogueStringBuilder* buffer_0 );
void RogueGlobal__on_launch( RogueClassGlobal* THIS );
void RogueGlobal__run_tests( RogueClassGlobal* THIS );
void RogueGlobal__call_exit_functions( RogueClassGlobal* THIS );
void RogueGlobal__on_exit__Function__( RogueClassGlobal* THIS, RogueClassFunction__* fn_0 );
RogueClassPrintWriter_global_output_buffer_* RoguePrintWriter_global_output_buffer___flush( RogueObject* THIS );
RogueClassPrintWriter_global_output_buffer_* RoguePrintWriter_global_output_buffer___write__StringBuilder( RogueObject* THIS, RogueStringBuilder* buffer_0 );
RogueClassPrintWriter* RoguePrintWriter__flush( RogueObject* THIS );
RogueClassPrintWriter* RoguePrintWriter__write__StringBuilder( RogueObject* THIS, RogueStringBuilder* buffer_0 );
RogueStringBuilder* RogueStringBuilder__init_object( RogueStringBuilder* THIS );
RogueStringBuilder* RogueStringBuilder__init( RogueStringBuilder* THIS );
RogueString* RogueStringBuilder__to_String( RogueStringBuilder* THIS );
RogueString* RogueStringBuilder__type_name( RogueStringBuilder* THIS );
RogueStringBuilder* RogueStringBuilder__init__Int32( RogueStringBuilder* THIS, RogueInt32 initial_capacity_0 );
RogueStringBuilder* RogueStringBuilder__clear( RogueStringBuilder* THIS );
RogueLogical RogueStringBuilder__needs_indent( RogueStringBuilder* THIS );
RogueStringBuilder* RogueStringBuilder__print__Character_Logical( RogueStringBuilder* THIS, RogueCharacter value_0, RogueLogical formatted_1 );
RogueStringBuilder* RogueStringBuilder__print__Int32( RogueStringBuilder* THIS, RogueInt32 value_0 );
RogueStringBuilder* RogueStringBuilder__print__Int64( RogueStringBuilder* THIS, RogueInt64 value_0 );
RogueStringBuilder* RogueStringBuilder__print__Object( RogueStringBuilder* THIS, RogueObject* value_0 );
RogueStringBuilder* RogueStringBuilder__print__String( RogueStringBuilder* THIS, RogueString* value_0 );
void RogueStringBuilder__print_indent( RogueStringBuilder* THIS );
RogueStringBuilder* RogueStringBuilder__println( RogueStringBuilder* THIS );
RogueStringBuilder* RogueStringBuilder__println__String( RogueStringBuilder* THIS, RogueString* value_0 );
RogueStringBuilder* RogueStringBuilder__reserve__Int32( RogueStringBuilder* THIS, RogueInt32 additional_bytes_0 );
RogueByte_List* RogueByte_List__init_object( RogueByte_List* THIS );
RogueByte_List* RogueByte_List__init( RogueByte_List* THIS );
RogueString* RogueByte_List__to_String( RogueByte_List* THIS );
RogueString* RogueByte_List__type_name( RogueByte_List* THIS );
RogueByte_List* RogueByte_List__init__Int32( RogueByte_List* THIS, RogueInt32 initial_capacity_0 );
RogueByte_List* RogueByte_List__add__Byte( RogueByte_List* THIS, RogueByte value_0 );
RogueInt32 RogueByte_List__capacity( RogueByte_List* THIS );
RogueByte_List* RogueByte_List__clear( RogueByte_List* THIS );
RogueByte_List* RogueByte_List__discard_from__Int32( RogueByte_List* THIS, RogueInt32 index_0 );
RogueByte_List* RogueByte_List__reserve__Int32( RogueByte_List* THIS, RogueInt32 additional_elements_0 );
RogueClassGenericList* RogueGenericList__init_object( RogueClassGenericList* THIS );
RogueString* RogueGenericList__type_name( RogueClassGenericList* THIS );
RogueString* RogueByte__to_String( RogueByte THIS );
RogueString* RogueArray_Byte___type_name( RogueArray* THIS );
RogueString* RogueNativeArray__type_name( RogueArray* THIS );
RogueInt32 RogueInt32__or_smaller__Int32( RogueInt32 THIS, RogueInt32 other_0 );
RogueCharacter RogueInt32__to_digit( RogueInt32 THIS );
RogueFunction___List* RogueFunction___List__init_object( RogueFunction___List* THIS );
RogueFunction___List* RogueFunction___List__init( RogueFunction___List* THIS );
RogueString* RogueFunction___List__to_String( RogueFunction___List* THIS );
RogueString* RogueFunction___List__type_name( RogueFunction___List* THIS );
RogueFunction___List* RogueFunction___List__init__Int32( RogueFunction___List* THIS, RogueInt32 initial_capacity_0 );
RogueFunction___List* RogueFunction___List__add__Function__( RogueFunction___List* THIS, RogueClassFunction__* value_0 );
RogueInt32 RogueFunction___List__capacity( RogueFunction___List* THIS );
RogueFunction___List* RogueFunction___List__reserve__Int32( RogueFunction___List* THIS, RogueInt32 additional_elements_0 );
void RogueFunction____call( RogueObject* THIS );
RogueString* RogueArray_Function_____type_name( RogueArray* THIS );
RogueException* RogueException__init_object( RogueException* THIS );
RogueException* RogueException__init( RogueException* THIS );
RogueString* RogueException__to_String( RogueException* THIS );
RogueString* RogueException__type_name( RogueException* THIS );
RogueException* RogueException__init__String( RogueException* THIS, RogueString* _auto_59_0 );
void RogueException__display( RogueException* THIS );
RogueString* RogueException__format( RogueException* THIS );
RogueInt32 RogueString__hash_code( RogueString* THIS );
RogueString* RogueString__to_String( RogueString* THIS );
RogueString* RogueString__type_name( RogueString* THIS );
RogueString* RogueString__after_first__String( RogueString* THIS, RogueString* st_0 );
RogueString* RogueString__before_first__Character( RogueString* THIS, RogueCharacter ch_0 );
RogueLogical RogueString__begins_with__Character( RogueString* THIS, RogueCharacter ch_0 );
RogueLogical RogueString__contains__Character( RogueString* THIS, RogueCharacter ch_0 );
RogueLogical RogueString__contains__String( RogueString* THIS, RogueString* substring_0 );
RogueLogical RogueString__contains_at__String_Int32( RogueString* THIS, RogueString* substring_0, RogueInt32 at_index_1 );
RogueLogical RogueString__ends_with__Character( RogueString* THIS, RogueCharacter ch_0 );
RogueLogical RogueString__ends_with__String( RogueString* THIS, RogueString* other_0 );
RogueString* RogueString__from__Int32( RogueString* THIS, RogueInt32 i1_0 );
RogueString* RogueString__from__Int32_Int32( RogueString* THIS, RogueInt32 i1_0, RogueInt32 i2_1 );
RogueString* RogueString__from_first__Character( RogueString* THIS, RogueCharacter ch_0 );
RogueCharacter RogueString__last( RogueString* THIS );
RogueString* RogueString__left_justified__Int32_Character( RogueString* THIS, RogueInt32 spaces_0, RogueCharacter fill_1 );
RogueString* RogueString__leftmost__Int32( RogueString* THIS, RogueInt32 n_0 );
RogueOptionalInt32 RogueString__locate__Character_OptionalInt32( RogueString* THIS, RogueCharacter ch_0, RogueOptionalInt32 optional_i1_1 );
RogueOptionalInt32 RogueString__locate__String_OptionalInt32( RogueString* THIS, RogueString* other_0, RogueOptionalInt32 optional_i1_1 );
RogueOptionalInt32 RogueString__locate_last__Character_OptionalInt32( RogueString* THIS, RogueCharacter ch_0, RogueOptionalInt32 starting_index_1 );
RogueString* RogueString__operatorPLUS__Character( RogueString* THIS, RogueCharacter value_0 );
RogueString* RogueString__operatorPLUS__Int32( RogueString* THIS, RogueInt32 value_0 );
RogueLogical RogueString__operatorEQUALSEQUALS__String( RogueString* THIS, RogueString* value_0 );
RogueString* RogueString__operatorPLUS__String( RogueString* THIS, RogueString* value_0 );
RogueString* RogueString__replacing__Character_Character( RogueString* THIS, RogueCharacter look_for_0, RogueCharacter replace_with_1 );
RogueString_List* RogueString__split__Character( RogueString* THIS, RogueCharacter separator_0 );
RogueString* RogueString__times__Int32( RogueString* THIS, RogueInt32 n_0 );
RogueString* RogueString__to_lowercase( RogueString* THIS );
RogueString* RogueString__trimmed( RogueString* THIS );
RogueString_List* RogueString__word_wrap__Int32_String( RogueString* THIS, RogueInt32 width_0, RogueString* allow_break_after_1 );
RogueStringBuilder* RogueString__word_wrap__Int32_StringBuilder_String( RogueString* THIS, RogueInt32 width_0, RogueStringBuilder* buffer_1, RogueString* allow_break_after_2 );
RogueClassStackTrace* RogueStackTrace__init_object( RogueClassStackTrace* THIS );
RogueString* RogueStackTrace__to_String( RogueClassStackTrace* THIS );
RogueString* RogueStackTrace__type_name( RogueClassStackTrace* THIS );
RogueClassStackTrace* RogueStackTrace__init__Int32( RogueClassStackTrace* THIS, RogueInt32 omit_count_0 );
void RogueStackTrace__format( RogueClassStackTrace* THIS );
void RogueStackTrace__print( RogueClassStackTrace* THIS );
RogueStringBuilder* RogueStackTrace__print__StringBuilder( RogueClassStackTrace* THIS, RogueStringBuilder* buffer_0 );
RogueString_List* RogueString_List__init_object( RogueString_List* THIS );
RogueString_List* RogueString_List__init( RogueString_List* THIS );
RogueString* RogueString_List__to_String( RogueString_List* THIS );
RogueString* RogueString_List__type_name( RogueString_List* THIS );
RogueString_List* RogueString_List__init__Int32( RogueString_List* THIS, RogueInt32 initial_capacity_0 );
RogueString_List* RogueString_List__add__String( RogueString_List* THIS, RogueString* value_0 );
RogueString_List* RogueString_List__add__String_List( RogueString_List* THIS, RogueString_List* other_0 );
RogueInt32 RogueString_List__capacity( RogueString_List* THIS );
RogueLogical RogueString_List__is_empty( RogueString_List* THIS );
RogueString_List* RogueString_List__reserve__Int32( RogueString_List* THIS, RogueInt32 additional_elements_0 );
RogueString* RogueString_List__remove_at__Int32( RogueString_List* THIS, RogueInt32 index_0 );
RogueString* RogueString_List__join__String( RogueString_List* THIS, RogueString* separator_0 );
RogueString* RogueArray_String___type_name( RogueArray* THIS );
RogueReal64 RogueReal64__or_smaller__Real64( RogueReal64 THIS, RogueReal64 other_0 );
RogueStringBuilder* RogueInt64__print_in_power2_base__Int32_Int32_StringBuilder( RogueInt64 THIS, RogueInt32 base_0, RogueInt32 digits_1, RogueStringBuilder* buffer_2 );
RogueString* RogueInt64__to_hex_string__Int32( RogueInt64 THIS, RogueInt32 digits_0 );
RogueString* RogueCharacter__to_String( RogueCharacter THIS );
RogueCharacter_List* RogueCharacter_List__init_object( RogueCharacter_List* THIS );
RogueCharacter_List* RogueCharacter_List__init( RogueCharacter_List* THIS );
RogueString* RogueCharacter_List__to_String( RogueCharacter_List* THIS );
RogueString* RogueCharacter_List__type_name( RogueCharacter_List* THIS );
RogueCharacter_List* RogueCharacter_List__init__Int32( RogueCharacter_List* THIS, RogueInt32 initial_capacity_0 );
RogueString* RogueArray_Character___type_name( RogueArray* THIS );
RogueClassConsole* RogueConsole__init_object( RogueClassConsole* THIS );
RogueClassConsole* RogueConsole__init( RogueClassConsole* THIS );
RogueString* RogueConsole__type_name( RogueClassConsole* THIS );
RogueClassConsole* RogueConsole__flush( RogueClassConsole* THIS );
RogueClassConsole* RogueConsole__write__StringBuilder( RogueClassConsole* THIS, RogueStringBuilder* buffer_0 );
RogueInt32 RogueConsole__width( RogueClassConsole* THIS );
RogueClassPrintWriter_output_buffer_* RoguePrintWriter_output_buffer___flush( RogueObject* THIS );
RogueClassPrintWriter_output_buffer_* RoguePrintWriter_output_buffer___write__StringBuilder( RogueObject* THIS, RogueStringBuilder* buffer_0 );
RogueClassConsoleErrorPrinter* RogueConsoleErrorPrinter__init_object( RogueClassConsoleErrorPrinter* THIS );
RogueString* RogueConsoleErrorPrinter__type_name( RogueClassConsoleErrorPrinter* THIS );
RogueClassConsoleErrorPrinter* RogueConsoleErrorPrinter__flush( RogueClassConsoleErrorPrinter* THIS );
RogueClassConsoleErrorPrinter* RogueConsoleErrorPrinter__write__StringBuilder( RogueClassConsoleErrorPrinter* THIS, RogueStringBuilder* buffer_0 );
RogueClassConsoleIOHandler* RogueConsoleIOHandler__init_object( RogueClassConsoleIOHandler* THIS );
RogueString* RogueConsoleIOHandler__type_name( RogueClassConsoleIOHandler* THIS );
RogueClassMath* RogueMath__init_object( RogueClassMath* THIS );
RogueString* RogueMath__type_name( RogueClassMath* THIS );
RogueClassRuntime* RogueRuntime__init_object( RogueClassRuntime* THIS );
RogueString* RogueRuntime__type_name( RogueClassRuntime* THIS );
RogueClassFunction_190* RogueFunction_190__init_object( RogueClassFunction_190* THIS );
RogueString* RogueFunction_190__type_name( RogueClassFunction_190* THIS );
void RogueFunction_190__call( RogueClassFunction_190* THIS );
RogueClassget_platform* Rogueget_platform__init_object( RogueClassget_platform* THIS );
RogueString* Rogueget_platform__type_name( RogueClassget_platform* THIS );
RogueClassstandard_build* Roguestandard_build__init_object( RogueClassstandard_build* THIS );
RogueString* Roguestandard_build__type_name( RogueClassstandard_build* THIS );
RogueClassSystem* RogueSystem__init_object( RogueClassSystem* THIS );
RogueString* RogueSystem__type_name( RogueClassSystem* THIS );
RogueClassError* RogueError__init_object( RogueClassError* THIS );
RogueString* RogueError__type_name( RogueClassError* THIS );
RogueWeakReference* RogueWeakReference__init_object( RogueWeakReference* THIS );
RogueString* RogueWeakReference__type_name( RogueWeakReference* THIS );
void RogueWeakReference__on_cleanup( RogueWeakReference* THIS );
RogueClassFile* RogueFile__init_object( RogueClassFile* THIS );
RogueString* RogueFile__to_String( RogueClassFile* THIS );
RogueString* RogueFile__type_name( RogueClassFile* THIS );
RogueClassFunction_623* RogueFunction_623__init_object( RogueClassFunction_623* THIS );
RogueString* RogueFunction_623__type_name( RogueClassFunction_623* THIS );
void RogueFunction_623__call( RogueClassFunction_623* THIS );
RogueClassFunction_623* RogueFunction_623__init__Console( RogueClassFunction_623* THIS, RogueClassConsole* _auto_624_0 );
RogueClassBlockingConsoleIOHandler* RogueBlockingConsoleIOHandler__init_object( RogueClassBlockingConsoleIOHandler* THIS );
RogueString* RogueBlockingConsoleIOHandler__type_name( RogueClassBlockingConsoleIOHandler* THIS );
void RogueBlockingConsoleIOHandler__write__Array_Int32( RogueClassBlockingConsoleIOHandler* THIS, RogueArray* bytes_0, RogueInt32 count_1 );
void RogueBlockingConsoleIOHandler__write_error__Array_Int32( RogueClassBlockingConsoleIOHandler* THIS, RogueArray* bytes_0, RogueInt32 count_1 );
RogueClassBuildConfig* RogueBuildConfig__init_object( RogueClassBuildConfig* THIS );
RogueString* RogueBuildConfig__type_name( RogueClassBuildConfig* THIS );
RogueClassinstall_emscripten* Rogueinstall_emscripten__init_object( RogueClassinstall_emscripten* THIS );
RogueString* Rogueinstall_emscripten__type_name( RogueClassinstall_emscripten* THIS );
RogueClassconfigure_build_folder* Rogueconfigure_build_folder__init_object( RogueClassconfigure_build_folder* THIS );
RogueString* Rogueconfigure_build_folder__type_name( RogueClassconfigure_build_folder* THIS );
RogueClasscompile* Roguecompile__init_object( RogueClasscompile* THIS );
RogueString* Roguecompile__type_name( RogueClasscompile* THIS );
RogueClassIOError* RogueIOError__init_object( RogueClassIOError* THIS );
RogueString* RogueIOError__type_name( RogueClassIOError* THIS );
RogueClassinstall_brew* Rogueinstall_brew__init_object( RogueClassinstall_brew* THIS );
RogueString* Rogueinstall_brew__type_name( RogueClassinstall_brew* THIS );
RogueClassinstall_library* Rogueinstall_library__init_object( RogueClassinstall_library* THIS );
RogueString* Rogueinstall_library__type_name( RogueClassinstall_library* THIS );
RogueClassneed_compile* Rogueneed_compile__init_object( RogueClassneed_compile* THIS );
RogueString* Rogueneed_compile__type_name( RogueClassneed_compile* THIS );
RogueClassmobile_or_desktop* Roguemobile_or_desktop__init_object( RogueClassmobile_or_desktop* THIS );
RogueString* Roguemobile_or_desktop__type_name( RogueClassmobile_or_desktop* THIS );
RogueClassrequire_command_line* Roguerequire_command_line__init_object( RogueClassrequire_command_line* THIS );
RogueString* Roguerequire_command_line__type_name( RogueClassrequire_command_line* THIS );
RogueString* RogueSystemEnvironment__get__String( RogueClassSystemEnvironment THIS, RogueString* name_0 );
RogueLogical RogueFileOptions__is_files_and_folders( RogueClassFileOptions THIS );
RogueLogical RogueFileOptions__is_files( RogueClassFileOptions THIS );
RogueLogical RogueFileOptions__is_folders( RogueClassFileOptions THIS );

// INTERNAL PROTOTYPES
void Rogue_trace();

